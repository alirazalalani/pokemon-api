{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","setName","pokemonDisplayed","setPokemonDisplayed","species","img","hp","attack","defense","type","pokemon","setPokemon","className","onChange","e","target","value","placeholder","onClick","Axios","get","then","response","data","sprites","other","dream_world","front_default","stats","base_stat","types","weight","src","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAoEeA,EAhEH,WACV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgDF,oBAAS,GAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KAEA,EAA8BJ,mBAAS,CACrCC,KAAM,GACNI,QAAS,GACTC,IAAK,GACLC,GAAI,GACJC,OAAQ,GACRC,QAAS,GACTC,KAAM,KAPR,mBAAOC,EAAP,KAAgBC,EAAhB,KA0BA,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,yCACA,uBACEC,SAAU,SAACC,GAAD,OAAOb,EAAQa,EAAEC,OAAOC,QAClCP,KAAK,OACLQ,YAAY,uBAEd,wBAAQC,QAzBM,WAClBC,IAAMC,IAAN,4CAA+CpB,IAAQqB,MAAK,SAACC,GAC3DX,EAAW,CACTX,KAAMA,EACNI,QAASkB,EAASC,KAAKnB,QAAQJ,KAC/BK,IAAKiB,EAASC,KAAKC,QAAQC,MAAMC,YAAYC,cAC7CrB,GAAIgB,EAASC,KAAKK,MAAM,GAAGC,UAC3BtB,OAAQe,EAASC,KAAKK,MAAM,GAAGC,UAC/BrB,QAASc,EAASC,KAAKK,MAAM,GAAGC,UAChCpB,KAAMa,EAASC,KAAKO,MAAM,GAAGrB,KAAKT,KAClC+B,OAAQT,EAASC,KAAKQ,SAExB5B,GAAoB,OAalB,+BAEF,qBAAKS,UAAU,iBAAf,SACIV,EAGA,qCACE,qBAAKU,UAAU,QAAf,SACE,qBAAKoB,IAAKtB,EAAQL,IAAK4B,IAAI,OAE7B,sBAAKrB,UAAU,iBAAf,UACE,2CAAcF,EAAQN,WACtB,sCAASM,EAAQJ,MACjB,0CAAaI,EAAQH,UACrB,2CAAcG,EAAQF,WACtB,wCAAWE,EAAQD,QACnB,0CAAaC,EAAQqB,gBAZzB,+DCnCKG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b97e695c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Axios from \"axios\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [name, setName] = useState(\"\"); //setName for input field\n  const [pokemonDisplayed, setPokemonDisplayed] = useState(false); //display the pokemon\n  //created the object because if we try to access the property inside the obj before it is set like if we want to access the name before pressing the button as all the data is fetched with the help of button\n  const [pokemon, setPokemon] = useState({\n    name: \"\",\n    species: \"\",\n    img: \"\",\n    hp: \"\",\n    attack: \"\",\n    defense: \"\",\n    type: \"\",\n  });\n\n  const findPokemon = () => {\n    Axios.get(`https://pokeapi.co/api/v2/pokemon/${name}`).then((response) => {\n      setPokemon({\n        name: name,\n        species: response.data.species.name,\n        img: response.data.sprites.other.dream_world.front_default,\n        hp: response.data.stats[0].base_stat,\n        attack: response.data.stats[1].base_stat,\n        defense: response.data.stats[2].base_stat,\n        type: response.data.types[0].type.name,\n        weight: response.data.weight,\n      });\n      setPokemonDisplayed(true);\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__titleSection\">\n        <h1>Pokemon</h1>\n        <input\n          onChange={(e) => setName(e.target.value)}\n          type=\"text\"\n          placeholder=\"enter pokemon name\"\n        />\n        <button onClick={findPokemon}>Search Pokemon</button>\n      </div>\n      <div className=\"displayPokemon\">\n        {!pokemonDisplayed ? (\n          <h1>Please choose a pokemon</h1>\n        ) : (\n          <>\n            <div className=\"image\">\n              <img src={pokemon.img} alt=\"\" />\n            </div>\n            <div className=\"displayContent\">\n              <h3>Species: {pokemon.species}</h3>\n              <h3>Hp: {pokemon.hp}</h3>\n              <h3>Attack: {pokemon.attack}</h3>\n              <h3>Defence: {pokemon.defense}</h3>\n              <h3>Type: {pokemon.type}</h3>\n              <h3>Weight: {pokemon.weight}</h3>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}